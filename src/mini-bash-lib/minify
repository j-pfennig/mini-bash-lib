#!/usr/bin/bash
CEN_LEGAL="Copyright Dr. J. Pfennig (c) 2024-2025; BSD License"
CEN_TITLE="Tool that strips comments and extra spaces or quotes"

# use proxy to load mini-bash-lib or centauri-bash-lib (if installed)
PATH+=":${0%/*}" . _mini_bash_lib -n -t -y - '0.06' || exit 2

# declare global variables ...

CEN_OPT_DOCTEXT=        # see --doctext
CEN_OPT_EMPTY=          # see --empty
CEN_OPT_NUMBER=         # see --number
CEN_OPT_OUTPUT=         # see --output
CEN_OPT_REFRESH=        # see --refresh
CEN_OPT_TRIM=           # see --trim
CEN_OPT_UGLIFY=         # see --uglify
CEN_OPT_WORLD=          # see --world

DAT_FOUT=               # output file path, see inpout()
DAT_FINP=               # input ...
DAT_QUIT_CALL=          # used with CEN_HOOK_QUIT

DAT_HELLO=(
    ''
    '# declare global variables ...'
    ''
    'CEN_OPT_EXTRA=                   # see --extra'
    ''
    '# ------------------------------------------------------------------------------'
    '# Payload'
    '# ------------------------------------------------------------------------------'
    'run() {'
    '    [ $# = 0 ] && set -- "Hello World!"'
    '    message -- "$@"'
    '}'
    ''
    '# ------------------------------------------------------------------------------'
    '# Parse command line options'
    '# ------------------------------------------------------------------------------'
    'options() {'
    '    case "$1" in'
    '        -X|--extra)     optarg 'extra' -     -f ;;'
    '    esac'
    '}'
    ''
    '# ------------------------------------------------------------------------------'
    '# Provide usage information'
    '# ------------------------------------------------------------------------------'
    'usage() {'
    '    usagecat <<!EOF'
    'Usage:     $CEN_NAME [-d|-h] [-v|-q] [---] <arg>...'
    ''
    '           $CEN_TITLE.'
    ''
    'Options:   -d --dryrun          show what would be done, make no changes'
    '           -h --help            show this text'
    '           -q --quiet           report errors only'
    '           -v --verbose         be verbose'
    ''
    '           -X --extra           demo option'
    ''
    'Arguments: <arg>                Echoed to output'
    ''
    '!EOF'
    '}'
    ''
)

# ------------------------------------------------------------------------------
# Extract documentation: <finp>
# ------------------------------------------------------------------------------
run_docu() {
    local data                                  # load data from input file
    inpout "$1"                                 # check files, set DAT_Fxxx

    system -r -f -- eval "readarray -t data <\"$DAT_FINP\""

    # process documentation blocks
    if [ "${CEN_OPT_OUTPUT:--}" = '-' ] ; then
        doctext "${data[@]}"
    else
        doctext "${data[@]}" >"$DAT_FOUT"
    fi
}

# ------------------------------------------------------------------------------
# Edit a script
# ------------------------------------------------------------------------------
run_edit() {
    [ -w "$CEN_OPT_REFRESH" ] || quit -e $"Not a writable file:" "$CEN_OPT_REFRESH"
    local libf="${CEN_CMDDATA%.p}"                  # see proxy code, library source
    [ -s "$libf" ] || quit -e $"Need mini-bash-lib source:" "$libf"
    inpout '.'
    local line skip tag1 tag2 outp=() inpp=()
    system -r -f -- eval "readarray -t inpp <\"$CEN_OPT_REFRESH\""

    for line in "${inpp[@]}" ; do
        [ -z "$skip" ] && outp+=("$line")
        case "$line" in
        '### mini-bash-lib source ###'*)
            CEN_OPT_EMPTY=1 ; run_pack "$DAT_FINP" outp
            skip=1 ; tag1=2 ;;
        '### mini-bash-lib packed ###'*)
            CEN_OPT_UGLIFY=1 ; CEN_OPT_EMPTY=1 ; CEN_OPT_TRIM=1
            run_pack "$DAT_FINP" outp
            skip=1 ; tag1=1 ;;
        '### mini-bash-lib end ###'*)
            skip= ; tag2=1 ; outp+=("$line") ;;
        esac
    done
    [ -z "$tag1" ] && quit -e $"File not tagged as embedding mini-bash-lib"
    [ -z "$tag2" ] && outp+=('### mini-bash-lib end ###')
    rename -f -o -- "$CEN_OPT_REFRESH" "$CEN_OPT_REFRESH.bak"
    output "$CEN_OPT_REFRESH" "${outp[@]}"
    system -e -p chmod 775 -- "$CEN_OPT_REFRESH"
}

# ------------------------------------------------------------------------------
# Create a script: <finp>
# ------------------------------------------------------------------------------
run_world() {
    local what='### mini-bash-lib source ###'
    if [ -n "$CEN_OPT_TRIM" ] ; then        # uglify
        CEN_OPT_UGLIFY=1 ; CEN_OPT_EMPTY=1
        what='### mini-bash-lib packed ###'
    fi

    local outp=(
        "#!$BASH"
        'CEN_LEGAL="Copyright <anonymous> (c) 2025; <unknown> License"'
        'CEN_TITLE="A hello world using mini-bash-lib"'
        ''
    )
    if [ -n "$CEN_OPT_EMPTY" -o -n "$CEN_OPT_TRIM" ] ; then
        [ -n "$CEN_OPT_TRIM" ] && CEN_OPT_UGLIFY=1
        outp+=(
            "CEN_VERSION='0.00'"
            '#CEN_FEATURE_F=1                 # enable --force option'
            '#CEN_FEATURE_Y=1                 # enable --no|--yes options'
            "${DAT_HELLO[@]}"
            '# ------------------------------------------------------------------------------'
            '# mini-bash-lib source-code: https://github.com/j-pfennig/mini-bash-lib'
            '# ------------------------------------------------------------------------------'
            ''
            "$what"
        )
            inpout '.' ; CEN_OPT_EMPTY=1 ; run_pack "$DAT_FINP" outp
        outp+=('### mini-bash-lib end ###')

    else
        outp+=(
            '# use proxy to load mini-bash-lib or centauri-bash-lib (if installed)'
            'PATH+=":${0%/*}" . _mini_bash_lib - "0.00" || exit 2'
            "${DAT_HELLO[@]}"
            '# ------------------------------------------------------------------------------'
            '# Pass control to app framework'
            '# ------------------------------------------------------------------------------'
            'main "$@" ; quit'
            ''
            '# End'
        )
    fi
    output "$CEN_OPT_OUTPUT" "${outp[@]}"
}

# ------------------------------------------------------------------------------
# Create packed library: <finp> <vnam>
# ------------------------------------------------------------------------------
run_pack() {
    local file="$1" data=()             # input array
    local -n _vout="$2"                 # output array

    system -r -f -- eval "readarray -t data <\"$file\""

    [ "${CEN_OPT_OUTPUT:--}" != '-' ] &&
        message -p $"Read %s lines from '%s'" "${#data[@]}" "${file#$PWD/}"
    if [ -n "$CEN_OPT_NUMBER" ] ; then
        CEN_OPT_EMPTY=1
    elif [ -z "$CEN_OPT_EMPTY" ] ; then     # just -O, no -U
        CEN_OPT_EMPTY=1 ; CEN_OPT_TRIM=1
        [ "${data::3}" = '#!/' ] && _vout+=("$data")
    fi

    local item itrm tail here line=0

    # loop over input lines
    for item in "${data[@]}" ; do
        if [ "$line" = 0 ] ; then
            itrm="$item"
        elif [ "${item::2}" = '#Â°' -a -z "$CEN_OPT_UGLIFY$CEN_OPT_NUMBER" ] ; then
            _vout+=('') ; item="#${item:2}" ; itrm="$item" ; ((line += 1))
        elif [ "${item::1}" = '#' ] ; then
            item= ; itrm=
        else
            itrm="${item#"${item%%[![:space:]]*}"}"
            if [ "${itrm::1}" = '#' ] ; then
               item= ; itrm=
            fi
        fi
        ((line += 1))

        [ -z "$itrm" -a -z "$here" -a -n "$CEN_OPT_EMPTY" ] && continue

        # trim also removes some inline comments
        if [ -n "$CEN_OPT_TRIM" ] ; then
            item="${itrm% #*}"
            if [ "$itrm" != "$item" ] ; then
                tail="${itrm:${#item}}"
                # tail must not be quoted
                [ "${tail/[\"\'\\]/}" = "$tail" ] && itrm="$item"
            fi
            item="$itrm"
        fi

        # remove trailing spaces
        item="${item%"${item##*[![:space:]]}"}"

        # suspend trimming in a '!EOF' here document
        if [ -n "$here" ] ; then
            [ "$item" = '!EOF' ] && { here= ; CEN_OPT_TRIM=1 ; }
        elif [ -z "$CEN_OPT_TRIM" ] ; then
            :
        elif [ "${item/\<\<!EOF/}" != "$item" ] ; then
            CEN_OPT_TRIM= ; here=1
        fi

        # uglify
        if [ -n "$CEN_OPT_TRIM" -a -n "$CEN_OPT_UGLIFY" ] ; then
            # remove extra spaces
            item="${item// && /\&\&}" ; item="${item// || /||}"
            item="${item//   / }" ; item="${item//  / }" ; item="${item//  / }"
            item="${item// ; /;}" ; item="${item/ ;;/;;}"
            # function declarations
            item="${item/() \{/()\{}"
            # some case statements
            case "$item" in
                -*\)\ *) item="${item/) /)}" ;;
                \*\)\ *) item="${item/) /)}" ;;
                [0-9]\)\ *) item="${item/) /)}" ;;
            esac
            # remove some quotes
            item="${item// \'-\' / - }"
            item="${item// \'--\' / -- }"
        fi

        # line numbering
        if [ -n "$CEN_OPT_NUMBER" ] ; then
            printf -v item '%4s: %s' "$line" "$item"
            _vout+=("$item")
        elif [ "$line" != 1 ] ; then
            _vout+=("$item")
        elif [ "${item::2}" != '#!' ] ; then
            _vout+=("$item")
        fi
    done
}

# ------------------------------------------------------------------------------
# Payload dispatcher
# ------------------------------------------------------------------------------
run() {
    # the one and only no-option argument is <finp> which defaults to '.'
    [ $# = 0 -a -n "$CEN_OPT_REFRESH" ] && set -- '.'
    [ $# = 1 ] || { usage ; quit -s 1 ; }

    # -N defaults to stdout
    [ -n "$CEN_OPT_NUMBER" -a -z "$CEN_OPT_OUTPUT" ] && CEN_OPT_OUTPUT='-'

    # the options -R and -W provide the <fout> file
    local fout="${CEN_OPT_REFRESH:-$CEN_OPT_OUTPUT}"
    [ -z "$fout" ] && quit -e $"Missing option '--output'"
    if [ "$fout" = '.' ] ; then
        [ -z "$CEN_OPT_UGLIFY" ] && quit -e $"Only '--uglify' can use '--output=.'"
    elif [ "$fout" != '-' -a -z "$CEN_OPT_REFRESH" ] && [ -e "$fout" ] ; then
        confirm -n -f $"Replace existing file '%s'" "$fout" || quit -a -t
    fi

    if [ -n "$CEN_OPT_DOCTEXT" ] ; then
        run_docu "$1"
    elif [ -n "$CEN_OPT_REFRESH" ] ; then
        run_edit
    elif [ -n "$CEN_OPT_WORLD" ] ; then
        run_world "$1"
    else
        local outp=() ; inpout "$1" ; run_pack "$DAT_FINP" outp
        output "$DAT_FOUT" "${outp[@]}"
    fi
}

# ------------------------------------------------------------------------------
# Check input and output file: <finp>             (sets DAT_FOUT to real output)
# ------------------------------------------------------------------------------
inpout() {
    local file="$1" fout="$CEN_OPT_OUTPUT"
    if [ "$file" = '.' ] ; then         # use library source
        [ "$CEN_FEATURE_N" = 1 ] || quit $"Try again using option '--mini=1'"
        file="${CEN_CMDDATA%.p}"        # see proxy code
    fi
    [ -f "$file" -a -r "$file" ] || quit -e $"Not a readable file:" "$file"
    DAT_FINP="$file"

    [ -z "$fout" ] && return
    [ "$fout" = '-' ] && return     # write to stdout
    [ "$fout" = '.' ] && fout="${file}.p"
    [ "$fout" -ef "$file" ] && quit -e $"Refusing to override input file"
    create -t -- "$fout"
    DAT_QUIT_CALL="$CEN_HOOK_QUIT"  # save head of hook chain
    CEN_HOOK_QUIT='cleanup'         # quit hook to delete bad output
    DAT_FOUT="$fout"                # used in hook function
}

# ------------------------------------------------------------------------------
# Write output file: <file> <data>...
# ------------------------------------------------------------------------------
output() {
    local fout="${1:--}" outp=("${@:2}")
    [ "$fout" = '-' ] && fout='/dev/stdout'
    create -t -v outp "$fout"
    if [ "$fout" != '/dev/stdout' ] ; then
        [ -n "$CEN_OPT_WORLD" -o -x "$file" ] && system -f -- chmod 775 -- "$fout"
        message -a -p $"Wrote %s lines into '%s'" "${#outp[@]}" "${fout#$PWD/}"
    fi
}

# ------------------------------------------------------------------------------
# Hook function for quit to remove bad output after error
# ------------------------------------------------------------------------------
cleanup() {
    if error -t ; then
        trace $"No error, keep output"
    elif [ -x "$DAT_FOUT" ] ; then
        trace $"Remove output after error:" "$DAT_FOUT"
        remove -- $DAT_FOUT
    fi
    $DAT_QUIT_CALL "$@"                     # call next in chain
}

# ------------------------------------------------------------------------------
# Handle documentation comments
# ------------------------------------------------------------------------------
doctext() {
    local _line _blck _isok
    while : ; do                            # loop over blocks
        _blck=() ; _isok=
        while [ $# -gt 0 ] ; do             # search start of block
            _line="$1" ; shift
            [[ "$_line" == \#\ ----* ]] && break
            docline "$_line"
        done

        for _isok in 0 0 0 1 ; do           # check mimimum size
            [ $# -gt 0 ] || return
            _line="$1" ; shift
            [[ "$_line" == \#* ]] || break
            [[ "$_line" == \#\ ----* ]] && break
            _blck+=("$_line")
        done
        if [ "$_isok" != 1 ] ; then
            [ -z "$CEN_OPT_TRIM" ] && [ -n "$CEN_OPT_EMPTY" ] &&
                for _line in "$_line" "${_blck[@]}" "$_line" ; do
                    docline "$_line"
                done
            continue
        fi
        while [ $# -gt 0 ] ; do             # get block body lines
            _line="$1" ; shift
            if [[ "$_line" != \#* ]] ; then
                _isok= ; break
            fi
            [[ "$_line" == \#\ ----* ]] && break
            _blck+=("$_line")
        done
        [ "$_isok" = 1 ] && docblock "${_blck[@]}"
    done
}

docblock() {
    [ -n "$CEN_OPT_EMPTY" ] && return
    local line frst=1
    echo
    [ -z "$CEN_OPT_TRIM" ] && echo '# --------'
    while [ $# -gt 0 ] ; do
        if [ "${1::2}" = '##' ] ; then
            shift ; continue
        fi
        if [ -z "$CEN_OPT_TRIM" ] ; then
            echo "$1" ; shift ; continue
        fi
        line="${1:2}" ; shift
        line="${line//[Â°Â§]/ }"
        line="${line//\'\'\'/}"
        line="${line//\*\*/}"

        line="${line//[[/}"
        line="${line// ]]/ ] ]}"
        line="${line//]]/}"

        printf '%s\n' "$line"
        [ -n "$frst" ] && printf '%s\n' "${line//?/-}"
        frst=
    done
    [ -z "$CEN_OPT_TRIM" ] && echo '# --------'
}

DAT_DOCTEXT=
docline() {
    [ -z "$CEN_OPT_EMPTY" ] && return
    [ "${1::2}" = '##' ] && return
    if [ -n "$CEN_OPT_TRIM" ] ; then
        [ "${1::13}" = '# shellcheck ' ] && return
    elif [ "${1::2}" = '#Â°' ] ; then
        echo "#${1:2}" ; return
    fi
    if [ -n "$1" ] ; then
        DAT_DOCTEXT=1 ; printf '%s\n' "$1" ; return
    fi
    [ -n "$DAT_DOCTEXT" ] && echo ; DAT_DOCTEXT=
}

# ------------------------------------------------------------------------------
# Custom options
# ------------------------------------------------------------------------------
options() {
    case "$1" in
        # end of option parsing
        '') [ -n "$CEN_OPT_UGLIFY" ] && CEN_OPT_TRIM=1
            local temp="${CEN_OPT_REFRESH:+1}"
            temp+="$CEN_OPT_DOCTEXT$CEN_OPT_NUMBER$CEN_OPT_UGLIFY$CEN_OPT_WORLD"
            [ "${temp:-1}" = 1 ] ||
                optarg - - -m '--doctext --number --refresh --uglify --world'
            [ -n "$CEN_OPT_OUTPUT" -a -n "$CEN_OPT_REFRESH" ] &&
                optarg - - -m '--output --refresh'
            ;;

        -D|--doc*) optarg  'doctext' -   -f ;;      # flag
        -E|--emp*) optarg  'empty'   -   -f ;;      # flag
        -N|--num*) optarg  'number'  -   -f ;;      # flag
        -O|--out*) optarg  'output'  -   -t ;;      # text option
        -R|--ref*) optarg  'refresh' -   -t ;;      # text option
        -T|--tri*) optarg  'trim'    -   -f ;;      # flag
        -U|--ugl*) optarg  'uglify'  -   -f ;;      # flag
        -W|--wor*) optarg  'world'   -   -f ;;      # flag
    esac
}

# ------------------------------------------------------------------------------
# Usage info
# ------------------------------------------------------------------------------
usage() {
    usagecat <<!EOF
Usage:     $CEN_NAME [-d] [-q|-v] [-E] [-N] [-O <fout>] [-T|-U] [---] <finp>|.
           $CEN_NAME [-d] [-q|-v] [-n|-y] -R <file>
           $CEN_NAME [-h]

           $CEN_TITLE.

Options:   -d --dryrun          show what would be done, make no changes
           -h --help            show this text
           -n --no              do not prompt for confirmation, assume 'no'
           -q --quiet           report errors only
           -v --verbose         be verbose
           -y --yes             do not prompt for confirmation, assume 'yes'

           -D --doctext         [*] extract documentation text
           -E --empty           skip empty output lines
           -N --number          [*] list line numbers, no comment/empty lines
           -O --output  <fout>  specify an output file
           -R --refresh <file>  [*] refresh mini-bash-lib embedded in <file>
           -T --trim            remove leading spaces and some inline comments
           -U --uglify          [*] enable --trim, strip extra spaces or quotes
           -W --world           [*] embed <finp> in a 'Hello World' script

           Â°                    [*] Mutually exclusive options

Arguments: <file>               script containing an embedded mini-bash-lib
           <finp>               input script (use '.' for mini-bash-lib source)
           <fout>               output file (use '.' to append '.p' to <finp>
           Â°                                 or  '-' to write to '/dev/stdout')

Remarks:   In 'centauri-bash-lib' there is a tool named 'uglify' for similar
           purposes. While '$CEN_NAME' is very stupid and barely understands
           more of Bash scripting thant needed, 'uglify' is somewhat smarter.

Examples:  # create a mini-bash-lib based 'hello world':
           $CEN_NAME -W -O hello                        # using the proxy
           $CEN_NAME -W -E -O hello                     # embedded library
           $CEN_NAME -W -T -O hello                     # embedded, packed

           # pack mini-bash-lib source (.p file)
           $CEN_NAME -U -E -O . .

           # refresh embedded mini-bash-lib
           $CEN_NAME -R myfile

           # list non-comment lines with line numbers
           $CEN_NAME -N -O - myfile

           # remove documentation comments from source
           $CEN_NAME -D -E -O myfile.pack myfile

           # extract documentation comments
           $CEN_NAME -D -O myfile.doc myfile            # for centaurihelp -U
           $CEN_NAME -D -T -O myfile.doc myfile         # text only

!EOF
}

# ------------------------------------------------------------------------------
# Pass control to app framework
# ------------------------------------------------------------------------------
main "$@" ; quit

# End
