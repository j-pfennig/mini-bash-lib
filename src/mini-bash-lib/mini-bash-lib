#!/usr/bin/bash
# ------------------------------------------------------------------------------
# mini-bash-lib         for bash 5.x
# ------------------------------------------------------------------------------

# This script can be used in three different ways:
#
#   1.  Stand alone:    implement your code in run() options() and usage()
#
#       run() {
#           # your code (stand-alone case), 'main "$@" ; quit' is implied
#       }
#       ... content of this file ...
#
#   2.  Sourced:        source it from another script file
#
#       run() {
#           # your code (stand-alone case), 'main "$@" ; quit' is implied
#       }
#       source "<this file>"
#
#   3.  via Proxy:      like 2. but the '_mini_bash_lib' does the sourcing
#
#       PATH+=":${0%/*}" . _mini_bash_lib - 'x.yy' || exit 2
#       run() {
#           ...
#       }
#       main "$@" ; quit

# ------------------------------------------------------------------------------
# The following text is formatted for: centaurihelp -U <file>
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# mini bash lib + A very minimal sub-set of centauri-bash-library
#
# Purpose: The mini-bash-lib has practical and educational use. Please always remember:
#
#, - it implements only something around 1% of _centauri_bash_lib
#, - it can be used simplify scripting and to support debugging
#, - it demonstrates some of the main design goals of _centauri_bash_lib:
#,     째    application framework: here only some option parsing, run() and usage()
#,     째    debug support: options -t|--trace and -d|--dryrun, trace()
#, - error handling: [[error()]], [[fatal()]], [[quit()]], [[system()]] to run commands
#, - simplify programming: folder(), splitjoin(), symlink(), confirm()
#, - reasonable console output: message(), warning(), trace()
#
# Content: The following functions and options are implemented:
#
#       [[confirm]]     [-a|-i] [-n|-y] [-p <what>] [--] <text>...
#       [[copy]]        [-f|-q] [-r] [-a] [-u] [--] <arg>...
#       [[create]]      [-r] [-t] [-c] [-v <vnam>] [--] <path>|-
#       [[dryrun]]      [-r]
#       [[embed]]       [-a|-s <vnam>] [-r] [--] <tool> <arg>...
#       [[error]]       -i] [-m|-p] [-q|-t] [--] <text>...
#       [[fatal]]       [-m|-p] [--] <text>...
#       [[folder]]      [-c] [-m] [-p] [-f|-q] [--] <path>
#       [[main]]        [<opt>...] [---] [<arg>...]
#       [[message]]     [-a|-i] [-m|-p] [--] <text>...          # also: -e|-f|-w -q|-t
#       [[optarg]]      <name> <vnam>|- [-t|-f] [<valu>]
#       [[rename]]      [-f|-q] [-r] [--] <arg>...
#       [[remove]]      [-f|-q] [-r] [-d] [-o] [--] <arg>...
#       [[splitjoin]]   [-j|-s <vnam>] [-d <deli>]
#       [[symlink]]     [-f|-q] [-r] [-n] [-r] [--] <arg>...
#       [[system]]      [-a|-s <vnam>] [-c] [-e|-f|-q|-t|-w] [-p] [-r] [-z] [--] <tool> <arg>...
#       [[tmpfile]]     [-n] [-r] [-s <vnam>]
#       [[trace]]       [-a|-i] [-m|-p] [--] <text>...
#       [[warning]]     [-a|-i] [-m|-p] [--] <text>...
#       [[quit]]        [-a|-i] [-e|-t|-u] [-m|-p] [-s <code>] [--] <text>...
#
#+General:  The order of options is not relevant, '--' terminates the option
#           list (if not used and the next argument starts with a '-' that
#           argument is parsed as an option).
# ------------------------------------------------------------------------------

# Proxy             Using a proxy to load mini-bash-lib or centauri-bash-lib
# Embedding         Embedding mini-bash-lib in a script, packing to source
# Framework         Application framwork: main - options - usage - run - quit
# Error handling    Creating robust scripts: error - quit - trace - dryrun
#   error -t        # status test
#   error -q        # test and call quit -e
#
#   quit -e         # 'terminated after error'
#   quit -t         # 'terminated'

# ------------------------------------------------------------------------------
# coexistence + Using mini-bash-lib script with centauri-bash-library installed
#
#   Option: --mini      never load _centauri-bash-lib
#
# template + Generating mini-bash-lib scripts with centauricreate
#
# run + The run function
#
# usage + Providing help
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# confirm - prompt for console input
#
# Call:     [-a|-i] [-n|-y|-p <what>] [-d <dflt>] [-s <vnam>] [-u] [--] <text>...
#
# Options:  -a  indent automatically
#           -d  default reply, also used with '-p .'
#           -i  always indent
#           -n  yes/No prompt, short for: -p ' [y/N]? ' -d 'no'
#           -p  appended to prompt text, see below for "-"|"+"|"."
#           -s  save reply to <vnam> variable
#           -u  allow upper case characters in reply
#           -y  Yes/no prompt, short for: -p ' [n/Y]? ' -d 'yes'
#
# Arguments:<dflt>          final part of prompt. Example: " [OK]? "
#           <text>          prompt message
#           <what>  -       ask for free text input
#                   +       ask for a password (no echo)
#                   .       append ' [<dflt>]: ' to prompt text
#                   <text>  append ' <dflt> ' to prompt text
#
# Return:   **true** for "yes" answer or non-empty result otherwise
#           **false** for "no" answer or empty result
#
#+Remarks:  The options --yes/--no passed to main cause prompts to be suppressed
#           and to return the following result:
#
#           --no    confirm always returns false
#           --yes   accept the default answer (as if <return> were hit)
#
# Examples: confirm -p '.' -d 'good' 'How do you feel today'
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# copy - conveniency wrapper for coreutils 'cp'
#
# Call:     copy [-f|-q] [-r] [-a] [-u] [--] <arg>...
#
# Options:  -a  run 'cp -a' (archive)
#           -f  make errors fatal
#           -q  do not report errors
#           -r  ignore --dryrun
#           -u  run 'cp -u' (update)
#
#           options not listed above are ignored
#
# Arguments:<arg>   all arguments are literally passed to 'cp'
#
# Return:   The status of 'cp' or **false** with --dryrun
#
#+This function executes something like "system -e -p -- cp <arg>" to simplify
# error handling.
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# dryrun - test for option --dryrun, generate trace message
#
# Call:     dryrun [-r] [--] <text>...
#
# Options:  -r  ignore --dryrun (return **false**)
#
#           options not listed above are ignored
#
# Arguments:<text>  text for --dryrun [[trace()]] message
#
# Return:   **true** for --dryrun, **false** otherwise
#
#.Examples: dryrun "skip some steps" && return
#
#.          if ! dryrun "Create file list:" "$PWD" ; then
#.              ls -1 > "$tmpfile"
#.          fi
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# embed - run another script like a sub-routine
#
# Call:     embed [-a|-s <vnam>] [-r] [--] <tool> <arg>...
#
# Options:  -a  return output as array of lines in <vnam>
#           -r  ignore --dryrun
#           -s  return output as a single line in <vnam>
#
# Arguments:<tool>  a mini-bash-lib or centauri-bash-lib script to be run
#           <arg>   options or arguments passed to the script
#
# The current script name is passed to <tool> as --embed=$CEN_NAME.
#
#+Return:   The return code of <tool> unless 3 (abort). In the later case
#           embed() does call "quit째-s째3".
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# error - output an error message
#
# Call:     error [-a|-i] [-m|-p] [-q|-t] [--] <text>...
#
# Options:  -a  auto-indent (e.g. do not print the script name)
#           -i  always indent
#           -m  multi-line output (one line per <text> argument)
#           -p  printf formatting (1st <text> arg. is format)
#           -q  call [[quit -q]] if a previous error has occurred
#           -t  silent test, return **false** for previous error
#
# Arguments:<text>  Any text to be output
#
# Return:   **true** on success (only -q|-t)  -or-  **false** otherwise
#
#.Examples: system    cmd1
#.          system -t cmd2
#.          error -q "A previous command has failed"
#
#.          while error -t ; do
#.              do_something
#.          done
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# fatal - output a fatal error message and run quit
#
# Call:     fatal [-m|-p] [--] <text>...
#
# Options:  -a  auto-indent (e.g. do not repeat to script name)
#           -i  always indent
#           -m  multi-line output (one line per <text> argument)
#           -p  printf formatting (1st <text> arg. is format)
#
# Arguments:<text>  Any text to be output
#
# Return:   This function never returns
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# folder - change working folder or create a new folder
#
# Call:     folder [-c] [-m] [-p] [-f|-q] [--] <path>
#
# Options:  -c  change current folder (default is to check existence)
#           -f  make errors fatal
#           -m  create folder as needed
#           -p  change to physical path
#           -q  do not report errors
#
# Arguments:<path>  folder path
#
# Return:   **true** on success  -or-  **false** otherwise
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# main - run the payload part of a script
#
# Call:     main [<opt>...] [---] [<arg>...]
#
# Options:  -<char>             short option
#           -<char><value>      short option with value (no separating space)
#           -<char> <value>     short option followed by value argument
#           --<name>            long option
#           --<name>=<value>    long option with value (using "=" separator)
#           --<name> <value>    short option followed by value argument
#
# Arguments:                    everything goes
#
# Return:                       not used, see [[quit()]]
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# message - Output text to stderr
#
# Call:     message [-a|-i] [-m|-p] [--] <text>...
#
# Options:  -a  auto-indent (e.g. do not repeat to script name)
#           -i  always indent
#           -m  multi-line output (one line per <text> argument)
#           -p  printf formatting (1st <text> arg. is format)
#
# Arguments:<text>  Any text to be output
#
# Return:   **true** on success
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# optarg - Option setter for use in options() call-back
#
# Call:     (1) optarg <name> <vnam>|- -f
#           (2) optarg <name> <vnam>|- -t [<valu>]
#
# Options:  -f      flag option, set <vnam> to "1"
#           -t      text option, set <vnam> to option argument or <valu>
#
# Arguments:<name>  option long name
#           <vnam>  name of a variable to be set. If "-" the name is generated
#                   from name like: CEN_OPT_<name>
#           <valu>  default used when the option argument is "-"
#
# Return:   **true** on success
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# rename - conveniency wrapper for coreutils 'mv'
#
# Call:     rename [-f|-q] [-r] [--] <arg>...
#
# Options:  -f  make errors fatal
#           -q  do not report errors
#           -r  ignore --dryrun
#
# Arguments:<arg>   passed to "mv" tool
#
# Return:   **true** on success  -or-  **false** otherwise
#
#+This function executes something like "system -e -p -- mv <arg>" to simplify
# error handling. Unlike in centauri-bash-lib no bash builtin is used.
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# remove - conveniency wrapper for coreutils 'rm'
#
# Call:     remove [-f|-q] [-r] [-d] [-o] [--] <arg>...
#
# Options:  -f  make errors fatal
#           -d  remove folders recursively
#           -o  pass "--one-filesystem" to "rm"
#           -q  do not report errors
#           -r  ignore --dryrun
#
# Arguments:<arg>   passed to "rm" tool
#
# Return:   **true** on success  -or-  **false** otherwise
#
#+This function executes something like "system -e -p -- rm -f <arg>" to simplify
# error handling. Unlike in centauri-bash-lib no bash builtin is used.
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# splitjoin split text data into array or join data to string
#
# Call:      splitjoin -j <vnam> [-d <deli>] [--] <text>...     # join to string
#            splitjoin -s <varr> [-d <deli>] [--] <text>...     # split to array
#
# Options:  -j  join to a single string, default delimiter is '\t' (tab)
#           -s  split to array, default delimiter is '\n\-t' (nl and tab)
#
# Arguments:<deli>  list of single char field delimiters (processed via printf)
#           <varr>  name of array variable for split result
#           <vstr>  name of string variable for joiin result
#           <text>  any input data
#
# Return:   **true** on success
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# symlink - conveniency wrapper for corutils 'ln -s'
#
# Call:     symlink [-f|-q] [-l] [-n] [-r] [--] <arg>...
#
# Options:  -f  make errors fatal
#           -l  make a relative symlink
#           -n  no error checks, use "ln -s -f"
#           -q  do not report errors
#           -r  ignore --dryrun
#
# Arguments:<arg>   passed to "ln" tool
#
# Return:   **true** on success  -or-  **false** otherwise
#
#+This function executes something like "system -e -p -- ln -s <arg>" to simplify
# error handling. Unlike in centauri-bash-lib no bash builtin is used.
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# system - Run an external (or builtin) command
#
# Call:     system [-a|-s <vnam>] [-e|-f|-q|-w] [-p] [-r] [-z] [--] <tool> <arg>...
#           system -c [-e|-f|-q|-w] [--] <tool>...
#
# Options:  -a  capture output to array
#           -c  check if arguments are executable commands
#           -e  output an error message on error
#           -f  make errors fatal
#           -p  pretty print error/warning output
#           -q  redirect **stdout** and **stderr** to "/dev/null"
#           -r  ignore --dryrun
#           -s  capture output to string
#           -w  output a warning on error
#           -z  capture **stderr** only. do not interfere with **stdout**
#
# Arguments:<tool>  external or builtin command to use
#           <arg>   arguemnts for <tool>
#           <vnam>  name of a string or array variable
#
# Notes:    mini-bash-lib not explicitly support bash loadables. So system makes
#           no difference beween builtin are external commands.
#
#           system cannot by used recursively, so better don't call functions.
#
#           While centauri-bash-lib uses "$(...)" to run a command mini-bash-lib
#           redirects to a temporary file (like [[sysrun()]] does. This avoids a
#           sub-shell but prevents recursive use.
#
# Return:   **true** on success  -or-  **false** otherwise
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# tmpfile - create a temporary file that get deleted by quit
#
# Call:     tmpfile [-n] [-r] [-s <vnam>]
#
# Options:  -n  do not actually create a file, return path only
#           -r  ignore --dryrun
#           -s  save path to given variable, default is CEN_TEMPFILE
#
# Arguments:<vnam>  name of a variable to receive the path
#
# Return:   **true** on success  -or-  **false** otherwise
#
# At program exit the [[quit()]] function recursively deletes all temporary
# objects that have a path obtained from tmpfile().
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# trace - Write a trace message to stderr output
#
# Call:     trace [-a|-i] [-m|-p] [--] <text>...
#
# Options:  -a  auto-indent (e.g. do not print the script name)
#           -i  always indent
#           -m  multi-line output (one line per <text> argument)
#           -p  printf formatting (1st <text> arg. is format)
#
# Arguments:<text>  Any text to be output
#
# Return:   **true** on success
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# warning - Write a warning message to stderr output
#
# Call:     warning [-a|-i] [-m|-p] [--] <text>...
#
# Options:  -a  auto-indent (e.g. do not print the script name)
#           -i  always indent
#           -m  multi-line output (one line per <text> argument)
#           -p  printf formatting (1st <text> arg. is format)
#
# Arguments:<text>  Any text to be output
#
# Return:   **true** on success
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# quit - terminate application, remove temporary file
#
# Call:     quit [-a|-i] [-e] [-m|-p] [-s <code>] [-t] [--] <text>...
#
# Options:  -a  auto-indent (e.g. do not print the script name)
#           -i  always indent
#           -m  multi-line output (one line per <text> argument)
#           -p  printf formatting (1st <text> arg. is format)
#           -t
#
# Arguments:...
#
# Return:   ...
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# mini-bash-lib         implementation
# ------------------------------------------------------------------------------
# shellcheck disable=SC2317
{
# shellcheck disable=SC2034
{
    CEN_EXIT=0              # exit code
    CEN_HOOK_QUIT=          # called by quit()
    CEN_IDNT=               # Flag for indentation
    CEN_MINI_VERSION='0.02'

    CEN_ARGS=               # option arg count  (0:=error  1:=flag only  2:has value)
    CEN_ARGOPT=             # potential option argument
    CEN_ACTARR=             # next cmd line argument
    CEN_CONFIRM=            # returned by confirm()
    CEN_OPT_DRYRUN=         # option -d
    CEN_OPT_FORCE=          # option -f

    CEN_TMP_BASE="${TMPDIR:-/tmp}/$EPOCHSECONDS-$BASHPID-"
    CEN_TMP_INDX=0
    CEN_TMP_SYSO=           # temp file for system()
    CEN_TMPFILE=            # see tmpfile()

    CEN_VERB=1              # option -v  (0:=error only  1:=normal  2:=trace)
    CEN_YESNO=              # option -n|-y
}

# some CEN_xxx variables are set in the proxy

# ------------------------------------------------------------------------------
# all output functions are implemented via message()
# ------------------------------------------------------------------------------

warning() { message -w "$@" ; }
error()   { message -e -l "$@" ; return "$CEN_EXIT" ; }
fatal()   { message -f -l "$@" ; }
trace()   { [ "$CEN_VERB" -lt 2 ] && return 0 ; message "$@" ; }

# write a message stderr: [-a|-i] [-m] [-p] [--] <text>...
message() {
    local _idnt="$CEN_NAME:" _exit _mesg _olog="$CEN_VERB" _opre _oqui _omul _opri
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        -)    break ;;
        --)   shift ; break ;;
        -a)   [ -n "$CEN_IDNT" ] && _idnt="${_idnt//?/ }" ;;
        -c)   # printf formatting is not unicode aware ...
              local _asci _ugly
              _asci="${2//[[:alpha:]]/.}"               # this is unicode aware
              printf -v _ugly "%-18s:" "$_asci"         # get correct padding
              printf -v _opre '%s' "${_ugly/$_asci/$2}" # back to unicode
              shift ;;
        -e)   _opre=$"***ERROR***" ; _exit=2 ;;
        -f)   _opre=$"***FATAL ERROR***" ; _oqui=1 ; _exit=3 ;;
        -i)   _idnt="${_idnt//?/ }" ;;
        -l)   _olog=1 ;;
        -m)   _omul=1 ;;
        -p)   _opri=1 ;;
        -q)   [ "$CEN_EXIT" = 0 ] && return 0 ; _oqui=2 ;;
        -t)   [ "$CEN_EXIT" = 0 ] ; return ;;
        -w)   _opre=$"***WARNING***" ;;
        esac ; shift
    done
    [ -n "$_exit" ] && { _olog=1 ; CEN_EXIT="$_exit" ; }
    [ "$_oqui" = 2 ] && quit -e "$@"
    [ "$_olog" -lt 1 ] && return 0
    if [ -n "$_omul" ] ; then
        _omul="$1" ; shift
        # shellcheck disable=SC2145
        set -- "$_omul${@/*/$'\n'${_idnt//?/ } &}"
    fi
    # shellcheck disable=SC2059
    [ -z "$_opri" ] && _mesg="$*" || printf -v _mesg "$@"
    [ -n "$_opre" ] && _mesg="$_opre $_mesg"
    echo "$_idnt" "$_mesg" >&2
    CEN_IDNT=1 ; [ -n "$_oqui" ] && quit
}

# ------------------------------------------------------------------------------
# various functions
# ------------------------------------------------------------------------------

# get input: [-a|-i] [-d <dflt>] [-f] [-p -|<info>] [-s <vnam>] [-u] [-y|-n] <text>...
confirm() {
    local _ofmt _oupc _what=1 _repl _vnam='CEN_CONFIRM' _idnt="$CEN_NAME:" _info _defn _text
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        --) shift ; break ;;
        -a) [ -n "$CEN_IDNT" ] && _idnt="${_idnt//?/ }" ;;
        -d) shift ; _defn="$1" ;;
        -f) _ofmt=1 ;;
        -i) _idnt="${_idnt//?/ }" ;;
        -n) _what=1 ;;
        -p) shift ; _what= ; _info="$1" ;;
        -s) shift ; _vnam="$1" ;;
        -u) _oupc=1 ;;
        -y) _what=0
        esac ; shift
    done
    # shellcheck disable=SC2059
    [ -z "$_ofmt" ] && _text="$*" || printf -v _text "$@"

    # just read text and return it
    if [ -z "$_what" ] ; then
        [ "$_info" = '-' ] && _info=': '
        read -p -r "$_idnt $_text$_info" _repl ; CEN_IDNT=1
        [ -z "$_repl" ] && _repl="$_defn"
        [ -z "$_oupc" ] && _repl="${_repl,,}"
        [ -n "$_vnam" ] && printf -v "$_vnam" '%s' "$_repl"
        [ -n "$_repl" ] ; return            # return status
    fi

    # ask a yes/no question
    local _locy _locn _loqy _loqn _loca=$"yes째no째 [Y/n]? 째 [y/N]? "
    IFS='째' read -r _locy _locn _loqy _loqn <<<"$_loca"
    if [ -z "$CEN_YESNO" ] ; then
        if [ "$_what" = 0 ] ; then          # yes
            _defn="$_locy" ; _info="$_loqy"
        else                                # no
            _defn="$_locn" ; _info="$_loqn"
        fi
        while : ; do
            read -rp "$_idnt $_text$_info" _repl ; CEN_IDNT=1
            _repl="${_repl,,}"
            case "${_repl::1}" in
            '')             _repl="$_defn" ; break ;;
            "${_locn::1}")  _repl="$_locn" ; break ;;
            "${_locy::1}")  _repl="$_locy" ; break
            esac
            message -l $"Please enter 'yes' or 'no'"
        done
    else
        [ "$CEN_YESNO" = 'y' ] && _repl="$_locy" || _repl="$_locn"
    fi
    [ -n "$_vnam" ] && printf -v "$_vnam" '%s' "$_repl"
    [ "$_repl" = "$_locy" ]                 # return status
}

# file output: create [-r] [-t] [-c] [-v <vnam>] [--] <path>|-
create() {
    local _rdry _rtru _vnam _fout _darr
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        --)   shift ; break ;;
        -c)   _vnam='-' ;;
        -r)   _rdry='-r' ;;
        -t)   _rtru=1 ;;
        -v)   shift ; _vnam="$1"
        esac ; shift
    done
    dryrun $_rdry 'create' "$@" && return 1
    [ "${1:--}" = '-' ] && _fout='/dev/stdout' || _fout="$1"
    if [ "${_fout::5}" != '/dev/' ] && [ -e "$_fout" ] ; then
       if [ -z "$_rtru" ] ; then
           error $"Existing file:" "$_fout" ; return 1
       elif ! [ -f "$_fout" -a -w "$_fout" ] ; then
           remove $_rdry -- "$_fout" || return 1
       fi
    fi
    _cen_create_file "$_fout" || return 1
    [ -z "$_vnam" ] && return 0
    if [ "$_vnam" = '-' ] ; then
        local _darr ; readarray -t _darr
    else
        local -n _darr="$_vnam"
    fi
    printf '%s\n' "${_darr[@]}" >"$_fout"
}

_cen_create_file() {
    true >"$1" 2>/dev/null && return 0 ; error $"Failed to create file:" "$1"
}

# check --dryrun option: [-r] [<mesg>...]
dryrun() {
    local _rdry="$CEN_OPT_DRYRUN"
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        --)   shift ; break ;;
        -r)   _rdry= ;;
        esac ; shift
    done

    if [ -z "$_rdry" ] ; then
        trace -a -c $"Execute" "$@" ; return 1
    fi
    message -a -c $"Skip" "$@" ; return 0
}

# run another tool using --embed: -m <fake> -a|-s <vnam> <system-opts> <tool> [--] <arg>...
embed() {
    local _opts=('--embed' "$CEN_NAME")
    [ -n "$CEN_OPT_DRYRUN" ] && _opts+=('--dryrun')
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        --)   shift ; break ;;
        -m)   return 0 ;;                       # mini-bash-lib has no modules
        -a|-s)  _opts+=("$1" "$2") ; shift ;;
        *)    _opts+=("$1")
        esac ; shift
    done
    local _prog="$1" _stat ; shift
    system -r "$_prog" "${_opts[@]}" -- "$@" ; _stat="$?"
    [ "$_stat" = 3 ] && quit -s 3 ; return "$_stat"
}

# create dir, set current dir: [-f|-q] [-m] [-c|-p] [--] <path>
folder() {
    local _ochg _omak _oerr='error'
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        --) shift ; break ;;
        -c) _ochg='cd' ;;
        -f) _oerr='fatal' ;;
        -m) _omak=1 ;;
        -p) _ochg='cd -P' ;;
        -q) _oerr=':' ;;
        esac ; shift
    done
    if [ ! -d "$1" ] ; then
        if [ -n "$_omak" ] ; then
            system -e -p -- mkdir -p "$1" || return 1
        else
            $_oerr $"Is not a folder:" "$1" || return 1
        fi
    fi
    [ -z "$_ochg" ] && return 0
    # using 'system eval cd ..' to simplify error handling
    system -r -e -- eval "$_ochg" "$1" || return 1
    trace -a -c $"Current folder" "$PWD" ; return 0
}

# handle word split or join: -j|-s <vnam>  [--] <data>...
# shellcheck disable=SC2206
# shellcheck disable=SC2059
splitjoin() {
    local _sopt _deli
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        --) shift ; break ;;
        -d) shift ; printf -v _deli "$1" ;;
        -s) shift ; local -n _vjsx="$1" ; _sopt=1 ;;
        -j) shift ; local -n _vjsx="$1" ; _sopt=2 ;;
        esac ; shift
    done
    case "$_sopt" in
    1)  [ -z "$_deli" ] && _deli=$'\t\n'
        local _sifs="$IFS"
        set -f ; IFS="$_deli" _vjsx=($*) ; set +f ; IFS="$_sifs" ;;
    2)  [ -z "$_deli" ] && _deli=$'\t'
        printf -v _vjsx "${_deli::1}%s" "$@" ; _vjsx="${_vjsx:1}" ;;
    *)  return 1
    esac ; return 0
}

# some simple file-system commands:
#   copy    [-f|-q] [-r] [-a] [-u] [--] <arg>...
#   rename  [-f|-q] [-r]           [--] <arg>...
#   remove  [-f|-q] [-r] [-d] [-o] [--] <arg>...
#   symlink [-f|-q] [-r] [-n] [-r] [--] <arg>...

copy() { _cen_simple_cmd 'cp' "$@" ; }        # -a -u
rename() { _cen_simple_cmd 'mv' "$@" ; }
remove() { _cen_simple_cmd 'rm' "$@" ; }      # -d -o
symlink() { _cen_simple_cmd 'ln -s' "$@" ; }  # -n -r

_cen_simple_cmd() {
    local _oerr='-e -p' _orun _args=("$1") ; shift
    while [ "${1::1}" = '-' ] ; do
        case "$1${_args::1}" in
        --?)    shift ; break ;;
        -ac)    _args+=('-a') ;;        # cp -a
        -uc)    _args+=('-u') ;;        # cp -u
        -dr)    _args+=('-r') ;;        # rm -r
        -or)    _args+=('--one-file-system') ;;
        -nl)    _args+=('-f' '-s') ;;   # ln -f
        -ll)    _args+=('-r') ;;        # ln -r
        -f?)    _oerr='-f -p' ;;
        -q?)    _oerr='-q' ;;
        -r?)    _orun=1 ;;
        esac ; shift
    done
    # shellcheck disable=SC2086
    system $_oerr $_orun -- "${_args[@]}" "$@"
}

# run a command: <opt>... [--] <cmd> <arg>...
system() {
    local _stat _mesg=':' _rdry _fchk _onam _ored _otyp
    # _ored (output redir)  '': none  0: /dev/null   1: stdout+err  2: stderr only
    # _otyp (output dest)   '': none  0: error only  1: to string   2: to array
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        --)   shift ; break ;;
        -a)   shift ; _onam="$1" ; _ored=1 ; _otyp=2 ;;
        -c)   _fchk=1 ;;
        -e)   _mesg='error' ;;
        -f)   _mesg='fatal' ;;
        -p)   _ored=1 ; [ -z "$_otyp" ] && _otyp=0 ;;
        -q)   _ored=0 ;;
        -r)   _rdry='-r' ;;
        -s)   shift ; _onam="$1" ; _ored=1 ; _otyp=1 ;;
        -t)   [ "$CEN_EXIT" = 0 ] || return 1 ;;
        -w)   _mesg='warning' ;;
        -z)   _ored=2 ; [ -z "$_otyp" ] && _otyp=0 ;;
        esac ; shift
    done
    if [ -n "$_fchk" ] ; then
        _stat=0
        for _fchk in "$@" ; do
            type -t "$_fchk" &>/dev/null && continue
            $_mesg -- $"Command not found:" "$_fchk" ; _stat=127
        done
        return "$_stat"
    fi
    dryrun $_rdry "$@" && return 1

    [ -n "$_otyp" -a -z "$CEN_TMP_SYSO" ] && tmpfile -r -s CEN_TMP_SYSO
    case "$_ored" in
    0)  "$@" &>/dev/null ; return ;;                    # return status
    1)  "$@" &>"$CEN_TMP_SYSO" ; _stat=$? ;;
    2)  "$@" 2>"$CEN_TMP_SYSO" ; _stat=$? ;;
    *)  "$@" ; _stat=$?
    esac
    [ "$_stat" = 0 -a -z "$_onam" ] && return 0         # output ignored

    # shellcheck disable=SC2015
    [ "$_otyp" = 2 ] && local -n _vsys="$_onam" || local _vsys
    readarray -t _vsys <"$CEN_TMP_SYSO"
    [ "$_otyp" = 1 ] && splitjoin -j "$_onam" -- "${_vsys[@]}"
    [ "$_stat" = 0 ] && return 0

    $_mesg -p $"Execution of '%s' failed (status %s)" "$1" "$_stat"
    [ "${_ored:-0}" != 0 ] && message -i -m "${_vsys[@]}"
    return "$_stat"
}

# create transient file: [-r] [-s <vnam>]
tmpfile() {
    local _vtmp='CEN_TEMPFILE' _rdry _crea=1
    local _temp="$CEN_TMP_BASE$CEN_TMP_INDX-$BASHPID"
    ((CEN_TMP_INDX += 1))
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        -n)   _crea= ;;
        -r)   _rdry='-r' ;;
        -s)   shift ; _vtmp="$1" ;;
        esac ; shift
    done
    printf -v "$_vtmp" '%s' "$_temp"
    [ -z "$_crea" ] && return 0
    dryrun $_rdry $"Temporary file" "$_temp" && return 1
    _cen_create_file "$_temp"                           # return status
 }

# ------------------------------------------------------------------------------
# main and quit
# ------------------------------------------------------------------------------
# shellcheck disable=SC2034
main() {
    # set app name and feature defaults if not yet set (by proxy)
    if [ "${CEN_NAME:--}" = '-' ] ;then
         CEN_NAME="${BASH_ARGV0##*/}"
         CEN_FEATURE_F=1 ; CEN_FEATURE_Y=1
    fi
    # minimalistic option parsing ('---' or '--' stop the parser)
    local _opts=':' ; PATH=' ' type -t 'options' &>/dev/null && _opts='options'
    while [ "${1::1}" = '-' ] ; do
        CEN_ARGS= ; CEN_ARGOPT= ; CEN_ACTION="$1" ; CEN_ACTARR="$2"
        case "$1" in
            --*=*)       CEN_ARGOPT="${1#*=}" ; CEN_ACTION="${1%%=*}" ;;
            -[^-]*)      CEN_ARGOPT="${1:2}"  ; CEN_ACTION="${1::2}" ;;
            --|---)      shift ; break ;;
        esac
        $_opts "$CEN_ACTION" "${CEN_ARGOPT:-$2}"
        [ -z "$CEN_ARGS" ] && CEN_ARGS=1 && case "$CEN_ACTION" in
            -d|--dry*)   CEN_OPT_DRYRUN=1 ;;
            -f|--for*)   [ -n "$CEN_FEATURE_F" ] && CEN_OPT_FORCE=1 || CEN_ARGS=0 ;;
            -h|--help)   PATH=' ' type -t usage &>/dev/null && { usage >&2 ; quit -s 2 ; }
                         quit $"Option '--help' is not implemented" ;;
            -n|--no)     [ -n "$CEN_FEATURE_Y" ] && CEN_YESNO='n' || CEN_ARGS=0 ;;
            -q|--qui*)   CEN_VERB=0 ;;
            -v|--ver*)   CEN_VERB=2 ;;
            -y|--yes)    [ -n "$CEN_FEATURE_Y" ] && CEN_YESNO='y' || CEN_ARGS=0 ;;
            --embed)     optarg - CEN_NAME -t ;;
            --info)      quit -p "mini-bash-lib $CEN_MINI_VERSION; '%s'; %s" "$CEN_VERSION" \
                                 "${CEN_LEGAL:-$"<unknown Author/Licence>"}" ;;
            --mini*)     ;;
            --trace)     set -x ;;
            *)           CEN_ARGS=
        esac
        [ "${CEN_ARGS:-0}" -lt 1 ] && quit -e $"Unknown option:" "$1"
        [ "$CEN_ARGS" -gt $# ] && CEN_ARGS="$#" ; shift "$CEN_ARGS"
    done
    CEN_ACTARR= ; CEN_ARGOPT= ; CEN_ACTION= ; $_opts    # end of option parsing
    PATH=' ' type -t run &>/dev/null || return 2 ; run "$@"
}

# get option setting: <name> <vnam>|- [-t|-f] [<value>]
optarg() {
    local _name="${2:--}" ; [ "$_name" = '-' ] && _name="CEN_OPT_${1^^}"
    case "${3:--f}" in
    -f) printf -v "$_name" '%s' "${4:-1}" ; CEN_ARGS=1 ;;
    *)  if [ -z "$CEN_ARGOPT" ] ; then
            [ "$CEN_ACTARR" != '-' -a "${CEN_ACTARR::1}" = '-' ] &&
                quit -e "Missing option value:" "--$1"
            CEN_ARGS=2 ; CEN_ARGOPT="$CEN_ACTARR"
        else
            CEN_ARGS=1
        fi
        [ "$CEN_ARGOPT" = '-' ] && CEN_ARGOPT="${4:--}" ; printf -v "$_name" '%s' "$CEN_ARGOPT"
    esac
}

# terminate script: [-a|-i] [-p] [-s <code>] [-e|-t|-u] [--] <text>...
quit() {
    local _opts=() _term
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        -)  break ;;
        --) shift ; break ;;
        -s) shift ; CEN_EXIT="$1" ;;
        -e) _term=$"Terminated after error" ; CEN_EXIT=1 ; _opts+=('-e') ;;
        -t|-u) _term=$"Terminated" ; CEN_EXIT=4 ;;
        *)  _opts+=("$1") ;;
        esac ; shift
    done

    type -t "$CEN_HOOK_QUIT" &>/dev/null && "$CEN_HOOK_QUIT" "$@"
    if [ -n "$_term" ] ; then
        if [ $# = 0 ] ;       then set -- "$_term"
        elif [ "$*" = '-' ] ; then set --
        elif [ "$1" = '-' ] ; then set -- "$_term""${2:+:}" "${@:2}"
        fi
    fi
    [ -n "$*" ] && message "${_opts[@]}" "$@"
    [ "$CEN_TMP_INDX" != 0 -a -n "$CEN_TMP_BASE" ] && system -q -r -- rm -f "$CEN_TMP_BASE"*
    trace -a "quit STATUS=$CEN_EXIT" ; exit "$CEN_EXIT"
}

# ------------------------------------------------------------------------------
# command not found runs in a sub-shell, must call quit() indirectly via signal
# ------------------------------------------------------------------------------
command_not_found_handle() {
    message -l $"***ABORT***" $"Command not found:" "$1"
    set +xeE ; kill -42 $$              # send signal to main shell
}

# shellcheck disable=SC2172
trap 'trap 42; quit -s 127' 42          # quit from main shell
}

# End
