#!/usr/bin/bash
CEN_LEGAL="Copyright Dr. J. Pfennig (c) 2007-2025; BSD License"
CEN_TITLE="Tool to generate gnu gettxt-tools internationalization"

# use proxy to load mini-bash-lib or centauri-bash-lib (if installed)
PATH+=":${0%/*}" . _mini_bash_lib -t - '0.03' || exit 2

# declare global variables ...

CEN_OPT_BASE=           # see --base

# ------------------------------------------------------------------------------
# create .po file: <fldr> <name>
# ------------------------------------------------------------------------------
run_dump() {
    local name="${2##*/}"
    local fipo="${1%/*}/$name.po"
    if [ -z "$CEN_OPT_FORCE" ] && [ ! "$2" -nt "$fipo" ] ; then
        message -a $"Nothing to update (try option '--force'):" "$fipo" ; return
    fi
    local umsg=('msgid ""' 'msgstr "Content-Type: text/plain; charset=UTF-8"')
    while : ; do
        # create temporary string file
        if ! dryrun "bash --dump-po-strings $2 >> ${fipo}t" ; then
            create -s -t -v umsg "${fipo}t" || break
            system -e -p -z -- bash --dump-po-strings "$2" >> "${fipo}t" || break
        fi

        # create a new 'po' file
        if [ ! -s "$fipo" ] ; then
            message -a -c $"Initial translations" "$fipo"
            if system -e -p -- msguniq --to-code=utf-8 --output-file "$fipo" "${fipo}t" ; then
                if [ ! -s "$fipo" ] ; then
                    warning -a $"No translations found:" "$fipo" ; remove -s "$fipo" ; break
                fi
            fi

        # update existing 'po' file
        else
            message -a -c $"Update translations" "$fipo"
            system -e -p -t -- msguniq --to-code=utf-8 --output-file "${fipo}u" "${fipo}t"
            if [ -s "${fipo}u" ] ; then
                system -e -p -t -- msgmerge --update "$fipo" "${fipo}u"
            else
                warning -a $"File without translations:" "$fipo"
            fi
            remove "${fipo}u"
        fi
        break
    done
    remove -s -- "${fipo}t"
}

# ------------------------------------------------------------------------------
# create .mo file: <fldr> <name>
# ------------------------------------------------------------------------------
run_build() {
    local name="${2##*/}"
    local fipo="${1%/*}/$name.po"
    local fimo="$1/$name.mo"
    if [ -z "$CEN_OPT_FORCE" ] && [ ! "$fipo" -nt "$fimo" ] ; then
        message -a $"Nothing to update (try option '--force'):" "$fimo" ; return
    fi

    message -a -c $"Create catalogue" "$fimo"
    if ! dryrun "msgfmt -o '$fimo' '$fipo'" ; then
        system -e -p -- msgfmt -o "$fimo" "$fipo"
    fi
}

# ------------------------------------------------------------------------------
# create language folder: <lang> <script>
# ------------------------------------------------------------------------------
run_lang() {
    local ldir="$1/LC_MESSAGES"
    if [ -d "$ldir" ] ; then
        [ -z "$2" ] && warning $"Existing language folder:" "$ldir"
    elif confirm -y -f $"Create language folder '%s'" "$ldir" ; then
        folder -m -f -- "$ldir"
    fi

    [ -n "$2" ] && symlink -n -l "$2" "${2##*/}"        # run: ln -f -r
}

# ------------------------------------------------------------------------------
# Payload
# ------------------------------------------------------------------------------
run() {
    # need two arguments - show usage info and quit
    [ $# -ge 2 ] || { usage ; quit -s 1 ; }

    # find base folder
    local orig="$PWD"
    if [ "${CEN_OPT_BASE:--}" = '-' ] ; then
        system -s CEN_OPT_BASE -- realpath -- "$BASH_SOURCE"
        CEN_OPT_BASE="${CEN_OPT_BASE%/*/*/*}"
    fi
    folder -f -c "$CEN_OPT_BASE"

    local lang bsrc
    case "$#$1" in
    3lan*)  lang="$2" ; name="$3" ;;
    2lan*)  lang="$2" ;;
    3dum*)  lang="$2" ; name="$3" ;;
    2dum*)  name="$2" ;;
    3bui*)  lang="$2" ; name="$3" ;;
    2bui*)  name="$2" ;;
    *)      usage ; quit -s 1
    esac

    # check script path
    if [ -n "$name" ] ; then
        for bsrc in "$name" "src/scripts" "src/mini-bash-lib" \
                            "share/doc/mini-bash-lib/"* ; do
            case "$bsrc" in
            /*) break ;;
            .*) system -s bsrc -- realpath -- "$name" ; break ;;
            *)  if [ ! -d "$bsrc" ] ; then
                    [ -e "$orig/$bsrc" ] || continue
                    system -s bsrc -- realpath -- "$orig/$bsrc" ; break
                fi
            esac
            trace -a -c "Script search" "$bsrc"
            bsrc="$PWD/$bsrc/$name" ; [ -x "$bsrc" ] && break
        done
        [ -f "$bsrc" ] || quit -e $"Source script not found:" "$name $bsrc"
        message -a -c $"Script source" "$bsrc"
    fi

    # get language folders
    folder -c -f -- 'share/locale'
    if [ "${1::3}" = 'lan' ] ; then
        run_lang "$lang" "$bsrc" ; quit
    fi
    local item dirs=(??/LC_MESSAGES)
    [ "${dirs::2}" = '??' ] &&
        quit -e $"No language folder found, try option '--base'"

    # check text-tools
    system -c -f msgfmt msguniq msgmerge

    # loop over languge folders ...
    folder -c -f -- "$orig"
    for item in "${dirs[@]}" ; do
        [ -n "$lang" -a "$lang" != "${item%/*}" ] && continue
        case "$1" in
        bui*)   run_build "$item" "$bsrc" ;;
        dum*)   run_dump "$item" "$bsrc" ;;
        *)      quit -e $"1st argument must be one of:" 'lang|dump|build'
        esac
        error -q
    done
}

# ------------------------------------------------------------------------------
# Custom options
# ------------------------------------------------------------------------------
options() {
    case "$1" in
        -B|--bas*) optarg  'base'       -   -t ;;      # text
    esac
}

# ------------------------------------------------------------------------------
# Usage info
# ------------------------------------------------------------------------------
usage() {
    usagecat <<!EOF
Usage:     $CEN_NAME [-d|-h] [-q|-v] -B <base> [--] <what> <arg>...

           $CEN_TITLE.

           (1) $CEN_NAME <opt>... lang  <lang> [<script>]  # add language
           (2) $CEN_NAME <opt>... dump  [<lang>] <script>  # update po files
           (3) $CEN_NAME <opt>... build [<lang>] <script>  # build mo files

Options:   -d --dryrun          show what would be done, make no changes
           -h --help            show this text
           -q --quiet           report errors only
           -v --verbose         be verbose

           -B --base    <base>  path of 'locale' base folder

Arguments: <lang>               language, 2-letter lower case like: de fr ...
           <script>             script file to be translated

Remarks:   Use the $ prefix like $"..." to flag translatable strings in source
           scripts. At run-time bash uses TEXTDOMAIN and TEXTDOMAINDIR to find
           the message catalogues for GNU gettxt.

           The '_mini_bash_lib' proxy sets these variables when option '-t' is
           passed. Also your source/deployment file system tree must look as it
           is shown below to make it work. Example for 'src/local/your-script':

           °   $CEN_NAME lang es                  # add Spanish to languages
           °   $CEN_NAME dump your-script         # create/update l10n source
           °   editor local/es/your-script.po  # edit translations
           °   $CEN_NAME build your-script        # create message catalogues

           This is the folder structure used with i10n:

           °   .
           °   ├── bin
           °   │   └── _mini_bash_lib -> ../src/mini-bash-lib/_mini_bash_lib
           °   ├── share
           °   │   └── locale
           °   │       ├── de
           °   │       │   ├── LC_MESSAGES
           °   │       │   │   ├── mini10.mo
           °   │       │   │   ├── mini-bash-lib.mo
           °   │       │   │   └── your-script.mo
           °   │       │   ├── mini10.po               [*] not to be deployed
           °   │       │   ├── mini-bash-lib.po        [*] ...
           °   │       │   └── your-script.po          [*] ...
           °   │       └── mini10
           °   └── src
           °       ├── mini-bash-lib
           °       │   ├── _mini_bash_lib
           °       │   └── mini-bash-lib
           °       └── scripts                         [*] folder for scripts
           °           └── your-script

           I10n for stand-alone scripts makes little sense. GNU gettxt wants
           a 'locale/<lang>/LC_MESSAGES/<name>.mo' file. The 'centauribuilder'
           tool of 'centauri-bash-lib' can embed mo files into a script, but
           has to create the file tree in a temporary folder at run-time. This
           is beyond the scope of 'mini-bash-lib'.

!EOF
}

# ------------------------------------------------------------------------------
# Pass control to app framework
# ------------------------------------------------------------------------------
main "$@" ; quit

# End
